// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class OrderbookReserveTrade extends EthereumEvent {
  get params(): OrderbookReserveTrade__Params {
    return new OrderbookReserveTrade__Params(this);
  }
}

export class OrderbookReserveTrade__Params {
  _event: OrderbookReserveTrade;

  constructor(event: OrderbookReserveTrade) {
    this._event = event;
  }

  get srcToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dstToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenDeposited extends EthereumEvent {
  get params(): TokenDeposited__Params {
    return new TokenDeposited__Params(this);
  }
}

export class TokenDeposited__Params {
  _event: TokenDeposited;

  constructor(event: TokenDeposited) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EtherDeposited extends EthereumEvent {
  get params(): EtherDeposited__Params {
    return new EtherDeposited__Params(this);
  }
}

export class EtherDeposited__Params {
  _event: EtherDeposited;

  constructor(event: EtherDeposited) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class KncFeeDeposited extends EthereumEvent {
  get params(): KncFeeDeposited__Params {
    return new KncFeeDeposited__Params(this);
  }
}

export class KncFeeDeposited__Params {
  _event: KncFeeDeposited;

  constructor(event: KncFeeDeposited) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewLimitOrder extends EthereumEvent {
  get params(): NewLimitOrder__Params {
    return new NewLimitOrder__Params(this);
  }
}

export class NewLimitOrder__Params {
  _event: NewLimitOrder;

  constructor(event: NewLimitOrder) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isEthToToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get srcAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get addedWithHint(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class OrderUpdated extends EthereumEvent {
  get params(): OrderUpdated__Params {
    return new OrderUpdated__Params(this);
  }
}

export class OrderUpdated__Params {
  _event: OrderUpdated;

  constructor(event: OrderUpdated) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isEthToToken(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get orderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get srcAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get updatedWithHint(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class OrderCanceled extends EthereumEvent {
  get params(): OrderCanceled__Params {
    return new OrderCanceled__Params(this);
  }
}

export class OrderCanceled__Params {
  _event: OrderCanceled;

  constructor(event: OrderCanceled) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isEthToToken(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get orderId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get srcAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FullOrderTaken extends EthereumEvent {
  get params(): FullOrderTaken__Params {
    return new FullOrderTaken__Params(this);
  }
}

export class FullOrderTaken__Params {
  _event: FullOrderTaken;

  constructor(event: FullOrderTaken) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isEthToToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class PartialOrderTaken extends EthereumEvent {
  get params(): PartialOrderTaken__Params {
    return new PartialOrderTaken__Params(this);
  }
}

export class PartialOrderTaken__Params {
  _event: PartialOrderTaken;

  constructor(event: PartialOrderTaken) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isEthToToken(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get isRemoved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class OrderbookReserve__makerOrdersTokenToEthResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OrderbookReserve__makerOrdersEthToTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OrderbookReserve__contractsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromAddress(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    return map;
  }
}

export class OrderbookReserve__getTokenToEthOrderResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class OrderbookReserve__limitsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class OrderbookReserve__getEthToTokenOrderResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class OrderbookReserve extends SmartContract {
  static bind(address: Address): OrderbookReserve {
    return new OrderbookReserve("OrderbookReserve", address);
  }

  NUM_ORDERS(): BigInt {
    let result = super.call("NUM_ORDERS", []);

    return result[0].toBigInt();
  }

  try_NUM_ORDERS(): CallResult<BigInt> {
    let result = super.tryCall("NUM_ORDERS", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  submitEthToTokenOrderWHint(
    srcAmount: BigInt,
    dstAmount: BigInt,
    hintPrevOrder: BigInt
  ): boolean {
    let result = super.call("submitEthToTokenOrderWHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);

    return result[0].toBoolean();
  }

  try_submitEthToTokenOrderWHint(
    srcAmount: BigInt,
    dstAmount: BigInt,
    hintPrevOrder: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("submitEthToTokenOrderWHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  calcBurnAmountFromFeeBurner(weiAmount: BigInt): BigInt {
    let result = super.call("calcBurnAmountFromFeeBurner", [
      EthereumValue.fromUnsignedBigInt(weiAmount)
    ]);

    return result[0].toBigInt();
  }

  try_calcBurnAmountFromFeeBurner(weiAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("calcBurnAmountFromFeeBurner", [
      EthereumValue.fromUnsignedBigInt(weiAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getEthToTokenUpdateOrderHint(
    orderId: BigInt,
    srcAmount: BigInt,
    dstAmount: BigInt
  ): BigInt {
    let result = super.call("getEthToTokenUpdateOrderHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getEthToTokenUpdateOrderHint(
    orderId: BigInt,
    srcAmount: BigInt,
    dstAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getEthToTokenUpdateOrderHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  makerKnc(param0: Address): BigInt {
    let result = super.call("makerKnc", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_makerKnc(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("makerKnc", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  makerOrdersTokenToEth(
    param0: Address
  ): OrderbookReserve__makerOrdersTokenToEthResult {
    let result = super.call("makerOrdersTokenToEth", [
      EthereumValue.fromAddress(param0)
    ]);

    return new OrderbookReserve__makerOrdersTokenToEthResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_makerOrdersTokenToEth(
    param0: Address
  ): CallResult<OrderbookReserve__makerOrdersTokenToEthResult> {
    let result = super.tryCall("makerOrdersTokenToEth", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OrderbookReserve__makerOrdersTokenToEthResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  kncPerEthBaseRatePrecision(): BigInt {
    let result = super.call("kncPerEthBaseRatePrecision", []);

    return result[0].toBigInt();
  }

  try_kncPerEthBaseRatePrecision(): CallResult<BigInt> {
    let result = super.tryCall("kncPerEthBaseRatePrecision", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenToEthAddOrderHint(srcAmount: BigInt, dstAmount: BigInt): BigInt {
    let result = super.call("getTokenToEthAddOrderHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenToEthAddOrderHint(
    srcAmount: BigInt,
    dstAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getTokenToEthAddOrderHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  BURN_TO_STAKE_FACTOR(): BigInt {
    let result = super.call("BURN_TO_STAKE_FACTOR", []);

    return result[0].toBigInt();
  }

  try_BURN_TO_STAKE_FACTOR(): CallResult<BigInt> {
    let result = super.tryCall("BURN_TO_STAKE_FACTOR", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  addOrderBatch(
    isEthToToken: Array<boolean>,
    srcAmount: Array<BigInt>,
    dstAmount: Array<BigInt>,
    hintPrevOrder: Array<BigInt>,
    isAfterPrevOrder: Array<boolean>
  ): boolean {
    let result = super.call("addOrderBatch", [
      EthereumValue.fromBooleanArray(isEthToToken),
      EthereumValue.fromUnsignedBigIntArray(srcAmount),
      EthereumValue.fromUnsignedBigIntArray(dstAmount),
      EthereumValue.fromUnsignedBigIntArray(hintPrevOrder),
      EthereumValue.fromBooleanArray(isAfterPrevOrder)
    ]);

    return result[0].toBoolean();
  }

  try_addOrderBatch(
    isEthToToken: Array<boolean>,
    srcAmount: Array<BigInt>,
    dstAmount: Array<BigInt>,
    hintPrevOrder: Array<BigInt>,
    isAfterPrevOrder: Array<boolean>
  ): CallResult<boolean> {
    let result = super.tryCall("addOrderBatch", [
      EthereumValue.fromBooleanArray(isEthToToken),
      EthereumValue.fromUnsignedBigIntArray(srcAmount),
      EthereumValue.fromUnsignedBigIntArray(dstAmount),
      EthereumValue.fromUnsignedBigIntArray(hintPrevOrder),
      EthereumValue.fromBooleanArray(isAfterPrevOrder)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  MIN_REMAINING_ORDER_RATIO(): BigInt {
    let result = super.call("MIN_REMAINING_ORDER_RATIO", []);

    return result[0].toBigInt();
  }

  try_MIN_REMAINING_ORDER_RATIO(): CallResult<BigInt> {
    let result = super.tryCall("MIN_REMAINING_ORDER_RATIO", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  makerOrdersEthToToken(
    param0: Address
  ): OrderbookReserve__makerOrdersEthToTokenResult {
    let result = super.call("makerOrdersEthToToken", [
      EthereumValue.fromAddress(param0)
    ]);

    return new OrderbookReserve__makerOrdersEthToTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_makerOrdersEthToToken(
    param0: Address
  ): CallResult<OrderbookReserve__makerOrdersEthToTokenResult> {
    let result = super.tryCall("makerOrdersEthToToken", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OrderbookReserve__makerOrdersEthToTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  updateEthToTokenOrderWHint(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt,
    hintPrevOrder: BigInt
  ): boolean {
    let result = super.call("updateEthToTokenOrderWHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);

    return result[0].toBoolean();
  }

  try_updateEthToTokenOrderWHint(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt,
    hintPrevOrder: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("updateEthToTokenOrderWHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  cancelTokenToEthOrder(orderId: BigInt): boolean {
    let result = super.call("cancelTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);

    return result[0].toBoolean();
  }

  try_cancelTokenToEthOrder(orderId: BigInt): CallResult<boolean> {
    let result = super.tryCall("cancelTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEthToTokenMakerOrderIds(maker: Address): Array<BigInt> {
    let result = super.call("getEthToTokenMakerOrderIds", [
      EthereumValue.fromAddress(maker)
    ]);

    return result[0].toBigIntArray();
  }

  try_getEthToTokenMakerOrderIds(maker: Address): CallResult<Array<BigInt>> {
    let result = super.tryCall("getEthToTokenMakerOrderIds", [
      EthereumValue.fromAddress(maker)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  getTokenToEthOrderList(): Array<BigInt> {
    let result = super.call("getTokenToEthOrderList", []);

    return result[0].toBigIntArray();
  }

  try_getTokenToEthOrderList(): CallResult<Array<BigInt>> {
    let result = super.tryCall("getTokenToEthOrderList", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  getEthToTokenAddOrderHint(srcAmount: BigInt, dstAmount: BigInt): BigInt {
    let result = super.call("getEthToTokenAddOrderHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getEthToTokenAddOrderHint(
    srcAmount: BigInt,
    dstAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getEthToTokenAddOrderHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  MAX_USD_PER_ETH(): BigInt {
    let result = super.call("MAX_USD_PER_ETH", []);

    return result[0].toBigInt();
  }

  try_MAX_USD_PER_ETH(): CallResult<BigInt> {
    let result = super.tryCall("MAX_USD_PER_ETH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokenToEthList(): Address {
    let result = super.call("tokenToEthList", []);

    return result[0].toAddress();
  }

  try_tokenToEthList(): CallResult<Address> {
    let result = super.tryCall("tokenToEthList", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  contracts(): OrderbookReserve__contractsResult {
    let result = super.call("contracts", []);

    return new OrderbookReserve__contractsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_contracts(): CallResult<OrderbookReserve__contractsResult> {
    let result = super.tryCall("contracts", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OrderbookReserve__contractsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  getTokenToEthOrder(
    orderId: BigInt
  ): OrderbookReserve__getTokenToEthOrderResult {
    let result = super.call("getTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);

    return new OrderbookReserve__getTokenToEthOrderResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getTokenToEthOrder(
    orderId: BigInt
  ): CallResult<OrderbookReserve__getTokenToEthOrderResult> {
    let result = super.tryCall("getTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OrderbookReserve__getTokenToEthOrderResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  submitTokenToEthOrder(srcAmount: BigInt, dstAmount: BigInt): boolean {
    let result = super.call("submitTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);

    return result[0].toBoolean();
  }

  try_submitTokenToEthOrder(
    srcAmount: BigInt,
    dstAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("submitTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  submitEthToTokenOrder(srcAmount: BigInt, dstAmount: BigInt): boolean {
    let result = super.call("submitEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);

    return result[0].toBoolean();
  }

  try_submitEthToTokenOrder(
    srcAmount: BigInt,
    dstAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("submitEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  MAX_BURN_FEE_BPS(): BigInt {
    let result = super.call("MAX_BURN_FEE_BPS", []);

    return result[0].toBigInt();
  }

  try_MAX_BURN_FEE_BPS(): CallResult<BigInt> {
    let result = super.tryCall("MAX_BURN_FEE_BPS", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getConversionRate(
    src: Address,
    dst: Address,
    srcQty: BigInt,
    blockNumber: BigInt
  ): BigInt {
    let result = super.call("getConversionRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dst),
      EthereumValue.fromUnsignedBigInt(srcQty),
      EthereumValue.fromUnsignedBigInt(blockNumber)
    ]);

    return result[0].toBigInt();
  }

  try_getConversionRate(
    src: Address,
    dst: Address,
    srcQty: BigInt,
    blockNumber: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getConversionRate", [
      EthereumValue.fromAddress(src),
      EthereumValue.fromAddress(dst),
      EthereumValue.fromUnsignedBigInt(srcQty),
      EthereumValue.fromUnsignedBigInt(blockNumber)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  calcKncStake(weiAmount: BigInt): BigInt {
    let result = super.call("calcKncStake", [
      EthereumValue.fromUnsignedBigInt(weiAmount)
    ]);

    return result[0].toBigInt();
  }

  try_calcKncStake(weiAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("calcKncStake", [
      EthereumValue.fromUnsignedBigInt(weiAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  updateEthToTokenOrder(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt
  ): boolean {
    let result = super.call("updateEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount)
    ]);

    return result[0].toBoolean();
  }

  try_updateEthToTokenOrder(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("updateEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  calcBurnAmount(weiAmount: BigInt): BigInt {
    let result = super.call("calcBurnAmount", [
      EthereumValue.fromUnsignedBigInt(weiAmount)
    ]);

    return result[0].toBigInt();
  }

  try_calcBurnAmount(weiAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("calcBurnAmount", [
      EthereumValue.fromUnsignedBigInt(weiAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  limits(): OrderbookReserve__limitsResult {
    let result = super.call("limits", []);

    return new OrderbookReserve__limitsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_limits(): CallResult<OrderbookReserve__limitsResult> {
    let result = super.tryCall("limits", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OrderbookReserve__limitsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  makerUnlockedKnc(maker: Address): BigInt {
    let result = super.call("makerUnlockedKnc", [
      EthereumValue.fromAddress(maker)
    ]);

    return result[0].toBigInt();
  }

  try_makerUnlockedKnc(maker: Address): CallResult<BigInt> {
    let result = super.tryCall("makerUnlockedKnc", [
      EthereumValue.fromAddress(maker)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTokenToEthUpdateOrderHint(
    orderId: BigInt,
    srcAmount: BigInt,
    dstAmount: BigInt
  ): BigInt {
    let result = super.call("getTokenToEthUpdateOrderHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenToEthUpdateOrderHint(
    orderId: BigInt,
    srcAmount: BigInt,
    dstAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getTokenToEthUpdateOrderHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  updateTokenToEthOrderWHint(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt,
    hintPrevOrder: BigInt
  ): boolean {
    let result = super.call("updateTokenToEthOrderWHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);

    return result[0].toBoolean();
  }

  try_updateTokenToEthOrderWHint(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt,
    hintPrevOrder: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("updateTokenToEthOrderWHint", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  updateTokenToEthOrder(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt
  ): boolean {
    let result = super.call("updateTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount)
    ]);

    return result[0].toBoolean();
  }

  try_updateTokenToEthOrder(
    orderId: BigInt,
    newSrcAmount: BigInt,
    newDstAmount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("updateTokenToEthOrder", [
      EthereumValue.fromUnsignedBigInt(orderId),
      EthereumValue.fromUnsignedBigInt(newSrcAmount),
      EthereumValue.fromUnsignedBigInt(newDstAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  submitTokenToEthOrderWHint(
    srcAmount: BigInt,
    dstAmount: BigInt,
    hintPrevOrder: BigInt
  ): boolean {
    let result = super.call("submitTokenToEthOrderWHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);

    return result[0].toBoolean();
  }

  try_submitTokenToEthOrderWHint(
    srcAmount: BigInt,
    dstAmount: BigInt,
    hintPrevOrder: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("submitTokenToEthOrderWHint", [
      EthereumValue.fromUnsignedBigInt(srcAmount),
      EthereumValue.fromUnsignedBigInt(dstAmount),
      EthereumValue.fromUnsignedBigInt(hintPrevOrder)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  setMinOrderSizeEth(): boolean {
    let result = super.call("setMinOrderSizeEth", []);

    return result[0].toBoolean();
  }

  try_setMinOrderSizeEth(): CallResult<boolean> {
    let result = super.tryCall("setMinOrderSizeEth", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getTokenToEthMakerOrderIds(maker: Address): Array<BigInt> {
    let result = super.call("getTokenToEthMakerOrderIds", [
      EthereumValue.fromAddress(maker)
    ]);

    return result[0].toBigIntArray();
  }

  try_getTokenToEthMakerOrderIds(maker: Address): CallResult<Array<BigInt>> {
    let result = super.tryCall("getTokenToEthMakerOrderIds", [
      EthereumValue.fromAddress(maker)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  makerRequiredKncStake(maker: Address): BigInt {
    let result = super.call("makerRequiredKncStake", [
      EthereumValue.fromAddress(maker)
    ]);

    return result[0].toBigInt();
  }

  try_makerRequiredKncStake(maker: Address): CallResult<BigInt> {
    let result = super.tryCall("makerRequiredKncStake", [
      EthereumValue.fromAddress(maker)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getEthToTokenOrder(
    orderId: BigInt
  ): OrderbookReserve__getEthToTokenOrderResult {
    let result = super.call("getEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);

    return new OrderbookReserve__getEthToTokenOrderResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getEthToTokenOrder(
    orderId: BigInt
  ): CallResult<OrderbookReserve__getEthToTokenOrderResult> {
    let result = super.tryCall("getEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new OrderbookReserve__getEthToTokenOrderResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  HEAD_ID(): BigInt {
    let result = super.call("HEAD_ID", []);

    return result[0].toBigInt();
  }

  try_HEAD_ID(): CallResult<BigInt> {
    let result = super.tryCall("HEAD_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  makerTotalOrdersWei(param0: Address): BigInt {
    let result = super.call("makerTotalOrdersWei", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_makerTotalOrdersWei(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("makerTotalOrdersWei", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  makerFunds(param0: Address, param1: Address): BigInt {
    let result = super.call("makerFunds", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_makerFunds(param0: Address, param1: Address): CallResult<BigInt> {
    let result = super.tryCall("makerFunds", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  makerBurnFeeBps(): BigInt {
    let result = super.call("makerBurnFeeBps", []);

    return result[0].toBigInt();
  }

  try_makerBurnFeeBps(): CallResult<BigInt> {
    let result = super.tryCall("makerBurnFeeBps", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  TAIL_ID(): BigInt {
    let result = super.call("TAIL_ID", []);

    return result[0].toBigInt();
  }

  try_TAIL_ID(): CallResult<BigInt> {
    let result = super.tryCall("TAIL_ID", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getBalance(token: Address, user: Address): BigInt {
    let result = super.call("getBalance", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getBalance(token: Address, user: Address): CallResult<BigInt> {
    let result = super.tryCall("getBalance", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromAddress(user)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  init(): boolean {
    let result = super.call("init", []);

    return result[0].toBoolean();
  }

  try_init(): CallResult<boolean> {
    let result = super.tryCall("init", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  kncRateBlocksTrade(): boolean {
    let result = super.call("kncRateBlocksTrade", []);

    return result[0].toBoolean();
  }

  try_kncRateBlocksTrade(): CallResult<boolean> {
    let result = super.tryCall("kncRateBlocksTrade", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  updateOrderBatch(
    isEthToToken: Array<boolean>,
    orderId: Array<BigInt>,
    newSrcAmount: Array<BigInt>,
    newDstAmount: Array<BigInt>,
    hintPrevOrder: Array<BigInt>
  ): boolean {
    let result = super.call("updateOrderBatch", [
      EthereumValue.fromBooleanArray(isEthToToken),
      EthereumValue.fromUnsignedBigIntArray(orderId),
      EthereumValue.fromUnsignedBigIntArray(newSrcAmount),
      EthereumValue.fromUnsignedBigIntArray(newDstAmount),
      EthereumValue.fromUnsignedBigIntArray(hintPrevOrder)
    ]);

    return result[0].toBoolean();
  }

  try_updateOrderBatch(
    isEthToToken: Array<boolean>,
    orderId: Array<BigInt>,
    newSrcAmount: Array<BigInt>,
    newDstAmount: Array<BigInt>,
    hintPrevOrder: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("updateOrderBatch", [
      EthereumValue.fromBooleanArray(isEthToToken),
      EthereumValue.fromUnsignedBigIntArray(orderId),
      EthereumValue.fromUnsignedBigIntArray(newSrcAmount),
      EthereumValue.fromUnsignedBigIntArray(newDstAmount),
      EthereumValue.fromUnsignedBigIntArray(hintPrevOrder)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEthToTokenOrderList(): Array<BigInt> {
    let result = super.call("getEthToTokenOrderList", []);

    return result[0].toBigIntArray();
  }

  try_getEthToTokenOrderList(): CallResult<Array<BigInt>> {
    let result = super.tryCall("getEthToTokenOrderList", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigIntArray());
  }

  cancelEthToTokenOrder(orderId: BigInt): boolean {
    let result = super.call("cancelEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);

    return result[0].toBoolean();
  }

  try_cancelEthToTokenOrder(orderId: BigInt): CallResult<boolean> {
    let result = super.tryCall("cancelEthToTokenOrder", [
      EthereumValue.fromUnsignedBigInt(orderId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  ethToTokenList(): Address {
    let result = super.call("ethToTokenList", []);

    return result[0].toAddress();
  }

  try_ethToTokenList(): CallResult<Address> {
    let result = super.tryCall("ethToTokenList", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class SubmitEthToTokenOrderWHintCall extends EthereumCall {
  get inputs(): SubmitEthToTokenOrderWHintCall__Inputs {
    return new SubmitEthToTokenOrderWHintCall__Inputs(this);
  }

  get outputs(): SubmitEthToTokenOrderWHintCall__Outputs {
    return new SubmitEthToTokenOrderWHintCall__Outputs(this);
  }
}

export class SubmitEthToTokenOrderWHintCall__Inputs {
  _call: SubmitEthToTokenOrderWHintCall;

  constructor(call: SubmitEthToTokenOrderWHintCall) {
    this._call = call;
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get hintPrevOrder(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitEthToTokenOrderWHintCall__Outputs {
  _call: SubmitEthToTokenOrderWHintCall;

  constructor(call: SubmitEthToTokenOrderWHintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositTokenCall extends EthereumCall {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class WithdrawEtherCall extends EthereumCall {
  get inputs(): WithdrawEtherCall__Inputs {
    return new WithdrawEtherCall__Inputs(this);
  }

  get outputs(): WithdrawEtherCall__Outputs {
    return new WithdrawEtherCall__Outputs(this);
  }
}

export class WithdrawEtherCall__Inputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawEtherCall__Outputs {
  _call: WithdrawEtherCall;

  constructor(call: WithdrawEtherCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends EthereumCall {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}

export class AddOrderBatchCall extends EthereumCall {
  get inputs(): AddOrderBatchCall__Inputs {
    return new AddOrderBatchCall__Inputs(this);
  }

  get outputs(): AddOrderBatchCall__Outputs {
    return new AddOrderBatchCall__Outputs(this);
  }
}

export class AddOrderBatchCall__Inputs {
  _call: AddOrderBatchCall;

  constructor(call: AddOrderBatchCall) {
    this._call = call;
  }

  get isEthToToken(): Array<boolean> {
    return this._call.inputValues[0].value.toBooleanArray();
  }

  get srcAmount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get dstAmount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get hintPrevOrder(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get isAfterPrevOrder(): Array<boolean> {
    return this._call.inputValues[4].value.toBooleanArray();
  }
}

export class AddOrderBatchCall__Outputs {
  _call: AddOrderBatchCall;

  constructor(call: AddOrderBatchCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositEtherCall extends EthereumCall {
  get inputs(): DepositEtherCall__Inputs {
    return new DepositEtherCall__Inputs(this);
  }

  get outputs(): DepositEtherCall__Outputs {
    return new DepositEtherCall__Outputs(this);
  }
}

export class DepositEtherCall__Inputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DepositEtherCall__Outputs {
  _call: DepositEtherCall;

  constructor(call: DepositEtherCall) {
    this._call = call;
  }
}

export class UpdateEthToTokenOrderWHintCall extends EthereumCall {
  get inputs(): UpdateEthToTokenOrderWHintCall__Inputs {
    return new UpdateEthToTokenOrderWHintCall__Inputs(this);
  }

  get outputs(): UpdateEthToTokenOrderWHintCall__Outputs {
    return new UpdateEthToTokenOrderWHintCall__Outputs(this);
  }
}

export class UpdateEthToTokenOrderWHintCall__Inputs {
  _call: UpdateEthToTokenOrderWHintCall;

  constructor(call: UpdateEthToTokenOrderWHintCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newSrcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newDstAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get hintPrevOrder(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateEthToTokenOrderWHintCall__Outputs {
  _call: UpdateEthToTokenOrderWHintCall;

  constructor(call: UpdateEthToTokenOrderWHintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelTokenToEthOrderCall extends EthereumCall {
  get inputs(): CancelTokenToEthOrderCall__Inputs {
    return new CancelTokenToEthOrderCall__Inputs(this);
  }

  get outputs(): CancelTokenToEthOrderCall__Outputs {
    return new CancelTokenToEthOrderCall__Outputs(this);
  }
}

export class CancelTokenToEthOrderCall__Inputs {
  _call: CancelTokenToEthOrderCall;

  constructor(call: CancelTokenToEthOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelTokenToEthOrderCall__Outputs {
  _call: CancelTokenToEthOrderCall;

  constructor(call: CancelTokenToEthOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TradeCall extends EthereumCall {
  get inputs(): TradeCall__Inputs {
    return new TradeCall__Inputs(this);
  }

  get outputs(): TradeCall__Outputs {
    return new TradeCall__Outputs(this);
  }
}

export class TradeCall__Inputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get srcToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get dstToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get dstAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get conversionRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get validate(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class TradeCall__Outputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubmitTokenToEthOrderCall extends EthereumCall {
  get inputs(): SubmitTokenToEthOrderCall__Inputs {
    return new SubmitTokenToEthOrderCall__Inputs(this);
  }

  get outputs(): SubmitTokenToEthOrderCall__Outputs {
    return new SubmitTokenToEthOrderCall__Outputs(this);
  }
}

export class SubmitTokenToEthOrderCall__Inputs {
  _call: SubmitTokenToEthOrderCall;

  constructor(call: SubmitTokenToEthOrderCall) {
    this._call = call;
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitTokenToEthOrderCall__Outputs {
  _call: SubmitTokenToEthOrderCall;

  constructor(call: SubmitTokenToEthOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubmitEthToTokenOrderCall extends EthereumCall {
  get inputs(): SubmitEthToTokenOrderCall__Inputs {
    return new SubmitEthToTokenOrderCall__Inputs(this);
  }

  get outputs(): SubmitEthToTokenOrderCall__Outputs {
    return new SubmitEthToTokenOrderCall__Outputs(this);
  }
}

export class SubmitEthToTokenOrderCall__Inputs {
  _call: SubmitEthToTokenOrderCall;

  constructor(call: SubmitEthToTokenOrderCall) {
    this._call = call;
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitEthToTokenOrderCall__Outputs {
  _call: SubmitEthToTokenOrderCall;

  constructor(call: SubmitEthToTokenOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetKncPerEthBaseRateCall extends EthereumCall {
  get inputs(): SetKncPerEthBaseRateCall__Inputs {
    return new SetKncPerEthBaseRateCall__Inputs(this);
  }

  get outputs(): SetKncPerEthBaseRateCall__Outputs {
    return new SetKncPerEthBaseRateCall__Outputs(this);
  }
}

export class SetKncPerEthBaseRateCall__Inputs {
  _call: SetKncPerEthBaseRateCall;

  constructor(call: SetKncPerEthBaseRateCall) {
    this._call = call;
  }
}

export class SetKncPerEthBaseRateCall__Outputs {
  _call: SetKncPerEthBaseRateCall;

  constructor(call: SetKncPerEthBaseRateCall) {
    this._call = call;
  }
}

export class UpdateEthToTokenOrderCall extends EthereumCall {
  get inputs(): UpdateEthToTokenOrderCall__Inputs {
    return new UpdateEthToTokenOrderCall__Inputs(this);
  }

  get outputs(): UpdateEthToTokenOrderCall__Outputs {
    return new UpdateEthToTokenOrderCall__Outputs(this);
  }
}

export class UpdateEthToTokenOrderCall__Inputs {
  _call: UpdateEthToTokenOrderCall;

  constructor(call: UpdateEthToTokenOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newSrcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newDstAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateEthToTokenOrderCall__Outputs {
  _call: UpdateEthToTokenOrderCall;

  constructor(call: UpdateEthToTokenOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateTokenToEthOrderWHintCall extends EthereumCall {
  get inputs(): UpdateTokenToEthOrderWHintCall__Inputs {
    return new UpdateTokenToEthOrderWHintCall__Inputs(this);
  }

  get outputs(): UpdateTokenToEthOrderWHintCall__Outputs {
    return new UpdateTokenToEthOrderWHintCall__Outputs(this);
  }
}

export class UpdateTokenToEthOrderWHintCall__Inputs {
  _call: UpdateTokenToEthOrderWHintCall;

  constructor(call: UpdateTokenToEthOrderWHintCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newSrcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newDstAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get hintPrevOrder(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateTokenToEthOrderWHintCall__Outputs {
  _call: UpdateTokenToEthOrderWHintCall;

  constructor(call: UpdateTokenToEthOrderWHintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawKncFeeCall extends EthereumCall {
  get inputs(): WithdrawKncFeeCall__Inputs {
    return new WithdrawKncFeeCall__Inputs(this);
  }

  get outputs(): WithdrawKncFeeCall__Outputs {
    return new WithdrawKncFeeCall__Outputs(this);
  }
}

export class WithdrawKncFeeCall__Inputs {
  _call: WithdrawKncFeeCall;

  constructor(call: WithdrawKncFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawKncFeeCall__Outputs {
  _call: WithdrawKncFeeCall;

  constructor(call: WithdrawKncFeeCall) {
    this._call = call;
  }
}

export class UpdateTokenToEthOrderCall extends EthereumCall {
  get inputs(): UpdateTokenToEthOrderCall__Inputs {
    return new UpdateTokenToEthOrderCall__Inputs(this);
  }

  get outputs(): UpdateTokenToEthOrderCall__Outputs {
    return new UpdateTokenToEthOrderCall__Outputs(this);
  }
}

export class UpdateTokenToEthOrderCall__Inputs {
  _call: UpdateTokenToEthOrderCall;

  constructor(call: UpdateTokenToEthOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newSrcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newDstAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTokenToEthOrderCall__Outputs {
  _call: UpdateTokenToEthOrderCall;

  constructor(call: UpdateTokenToEthOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SubmitTokenToEthOrderWHintCall extends EthereumCall {
  get inputs(): SubmitTokenToEthOrderWHintCall__Inputs {
    return new SubmitTokenToEthOrderWHintCall__Inputs(this);
  }

  get outputs(): SubmitTokenToEthOrderWHintCall__Outputs {
    return new SubmitTokenToEthOrderWHintCall__Outputs(this);
  }
}

export class SubmitTokenToEthOrderWHintCall__Inputs {
  _call: SubmitTokenToEthOrderWHintCall;

  constructor(call: SubmitTokenToEthOrderWHintCall) {
    this._call = call;
  }

  get srcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get dstAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get hintPrevOrder(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitTokenToEthOrderWHintCall__Outputs {
  _call: SubmitTokenToEthOrderWHintCall;

  constructor(call: SubmitTokenToEthOrderWHintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMinOrderSizeEthCall extends EthereumCall {
  get inputs(): SetMinOrderSizeEthCall__Inputs {
    return new SetMinOrderSizeEthCall__Inputs(this);
  }

  get outputs(): SetMinOrderSizeEthCall__Outputs {
    return new SetMinOrderSizeEthCall__Outputs(this);
  }
}

export class SetMinOrderSizeEthCall__Inputs {
  _call: SetMinOrderSizeEthCall;

  constructor(call: SetMinOrderSizeEthCall) {
    this._call = call;
  }
}

export class SetMinOrderSizeEthCall__Outputs {
  _call: SetMinOrderSizeEthCall;

  constructor(call: SetMinOrderSizeEthCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositKncForFeeCall extends EthereumCall {
  get inputs(): DepositKncForFeeCall__Inputs {
    return new DepositKncForFeeCall__Inputs(this);
  }

  get outputs(): DepositKncForFeeCall__Outputs {
    return new DepositKncForFeeCall__Outputs(this);
  }
}

export class DepositKncForFeeCall__Inputs {
  _call: DepositKncForFeeCall;

  constructor(call: DepositKncForFeeCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositKncForFeeCall__Outputs {
  _call: DepositKncForFeeCall;

  constructor(call: DepositKncForFeeCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateOrderBatchCall extends EthereumCall {
  get inputs(): UpdateOrderBatchCall__Inputs {
    return new UpdateOrderBatchCall__Inputs(this);
  }

  get outputs(): UpdateOrderBatchCall__Outputs {
    return new UpdateOrderBatchCall__Outputs(this);
  }
}

export class UpdateOrderBatchCall__Inputs {
  _call: UpdateOrderBatchCall;

  constructor(call: UpdateOrderBatchCall) {
    this._call = call;
  }

  get isEthToToken(): Array<boolean> {
    return this._call.inputValues[0].value.toBooleanArray();
  }

  get orderId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get newSrcAmount(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get newDstAmount(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get hintPrevOrder(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class UpdateOrderBatchCall__Outputs {
  _call: UpdateOrderBatchCall;

  constructor(call: UpdateOrderBatchCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelEthToTokenOrderCall extends EthereumCall {
  get inputs(): CancelEthToTokenOrderCall__Inputs {
    return new CancelEthToTokenOrderCall__Inputs(this);
  }

  get outputs(): CancelEthToTokenOrderCall__Outputs {
    return new CancelEthToTokenOrderCall__Outputs(this);
  }
}

export class CancelEthToTokenOrderCall__Inputs {
  _call: CancelEthToTokenOrderCall;

  constructor(call: CancelEthToTokenOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelEthToTokenOrderCall__Outputs {
  _call: CancelEthToTokenOrderCall;

  constructor(call: CancelEthToTokenOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get knc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reserveToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get burner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get network(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get medianizer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get factory(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get minNewOrderUsd(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get maxOrdersPerTrade(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get burnFeeBps(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
