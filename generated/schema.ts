// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get trader(): Bytes {
    let value = this.get("trader");
    return value.toBytes();
  }

  set trader(value: Bytes) {
    this.set("trader", Value.fromBytes(value));
  }

  get src(): Bytes {
    let value = this.get("src");
    return value.toBytes();
  }

  set src(value: Bytes) {
    this.set("src", Value.fromBytes(value));
  }
}

export class tokenReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save tokenReserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save tokenReserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("tokenReserve", id.toString(), this);
  }

  static load(id: string): tokenReserve | null {
    return store.get("tokenReserve", id) as tokenReserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get reserveAddress(): Bytes | null {
    let value = this.get("reserveAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set reserveAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("reserveAddress");
    } else {
      this.set("reserveAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }
}

export class getEtherReceival extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save getEtherReceival entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save getEtherReceival entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("getEtherReceival", id.toString(), this);
  }

  static load(id: string): getEtherReceival | null {
    return store.get("getEtherReceival", id) as getEtherReceival | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class getKyberTrades extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save getKyberTrades entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save getKyberTrades entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("getKyberTrades", id.toString(), this);
  }

  static load(id: string): getKyberTrades | null {
    return store.get("getKyberTrades", id) as getKyberTrades | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get traderAddress(): Bytes {
    let value = this.get("traderAddress");
    return value.toBytes();
  }

  set traderAddress(value: Bytes) {
    this.set("traderAddress", Value.fromBytes(value));
  }
}

export class getListReserves extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save getListReserves entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save getListReserves entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("getListReserves", id.toString(), this);
  }

  static load(id: string): getListReserves | null {
    return store.get("getListReserves", id) as getListReserves | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get source(): Bytes {
    let value = this.get("source");
    return value.toBytes();
  }

  set source(value: Bytes) {
    this.set("source", Value.fromBytes(value));
  }
}
