// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class kyberReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save kyberReserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save kyberReserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("kyberReserve", id.toString(), this);
  }

  static load(id: string): kyberReserve | null {
    return store.get("kyberReserve", id) as kyberReserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserveCount(): i32 {
    let value = this.get("reserveCount");
    return value.toI32();
  }

  set reserveCount(value: i32) {
    this.set("reserveCount", Value.fromI32(value));
  }

  get kyberTotalTokenDeposited(): BigDecimal | null {
    let value = this.get("kyberTotalTokenDeposited");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set kyberTotalTokenDeposited(value: BigDecimal | null) {
    if (value === null) {
      this.unset("kyberTotalTokenDeposited");
    } else {
      this.set(
        "kyberTotalTokenDeposited",
        Value.fromBigDecimal(value as BigDecimal)
      );
    }
  }

  get kyberTotalEtherDeposited(): BigDecimal | null {
    let value = this.get("kyberTotalEtherDeposited");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set kyberTotalEtherDeposited(value: BigDecimal | null) {
    if (value === null) {
      this.unset("kyberTotalEtherDeposited");
    } else {
      this.set(
        "kyberTotalEtherDeposited",
        Value.fromBigDecimal(value as BigDecimal)
      );
    }
  }
}

export class tokenReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save tokenReserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save tokenReserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("tokenReserve", id.toString(), this);
  }

  static load(id: string): tokenReserve | null {
    return store.get("tokenReserve", id) as tokenReserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get startTime(): i32 {
    let value = this.get("startTime");
    return value.toI32();
  }

  set startTime(value: i32) {
    this.set("startTime", Value.fromI32(value));
  }

  get totalTokenDeposited(): BigDecimal | null {
    let value = this.get("totalTokenDeposited");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTokenDeposited(value: BigDecimal | null) {
    if (value === null) {
      this.unset("totalTokenDeposited");
    } else {
      this.set(
        "totalTokenDeposited",
        Value.fromBigDecimal(value as BigDecimal)
      );
    }
  }

  get totalEtherDeposited(): BigDecimal | null {
    let value = this.get("totalEtherDeposited");
    if (value === null) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalEtherDeposited(value: BigDecimal | null) {
    if (value === null) {
      this.unset("totalEtherDeposited");
    } else {
      this.set(
        "totalEtherDeposited",
        Value.fromBigDecimal(value as BigDecimal)
      );
    }
  }
}
